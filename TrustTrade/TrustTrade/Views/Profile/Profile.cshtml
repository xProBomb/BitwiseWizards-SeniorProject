@model TrustTrade.ViewModels.ProfileViewModel

@{
    ViewData["Title"] = "Profile";
    var currentUserId = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
    bool isOwner = !string.IsNullOrEmpty(currentUserId) && currentUserId == Model.IdentityId;
    bool isFollowing = Model.IsFollowing;
}

<!-- Show top-level validation summary -->
<div class="text-danger">
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
</div>

<div class="container mt-4">
    <!-- Profile Background Header -->
    <div
        class="profile-header @((Model.BackgroundImage != null || !string.IsNullOrEmpty(Model.BackgroundImageUrl)) ? "has-background" : "")">
        @if (Model.BackgroundImage != null && (Model.BackgroundSource == "File" || string.IsNullOrEmpty(Model.BackgroundSource)))
        {
            <div class="profile-background"
                 style="background-image: url('data:image/jpeg;base64,@Convert.ToBase64String(Model.BackgroundImage)');"></div>
        }
        else if (!string.IsNullOrEmpty(Model.BackgroundImageUrl) && Model.BackgroundSource == "Url")
        {
            <div class="profile-background" style="background-image: url('@Model.BackgroundImageUrl');"></div>
        }

        <!-- Controls for background image (owner only) -->
        @if (isOwner)
        {
            <div class="background-controls">
                <button
                    class="btn btn-sm @((Model.BackgroundImage != null || !string.IsNullOrEmpty(Model.BackgroundImageUrl)) ? "btn-light" : "btn-secondary")"
                    data-bs-toggle="modal" data-bs-target="#updateBackgroundImageModal">
                    <i class="bi bi-image"></i> @((Model.BackgroundImage != null || !string.IsNullOrEmpty(Model.BackgroundImageUrl)) ? "Change Background" : "Add Background")
                </button>
                @if (Model.BackgroundImage != null || !string.IsNullOrEmpty(Model.BackgroundImageUrl))
                {
                    <form asp-action="RemoveBackgroundImage" method="post" class="d-inline ms-2">
                        <button type="submit" class="btn btn-sm btn-danger">
                            <i class="bi bi-trash"></i> Remove
                        </button>
                    </form>
                }
            </div>
        }

        <!-- Profile Name, Joined Date and Follow Button -->
        <div class="profile-content">
            <h2 id="profile-container">
                @if (Model.ProfilePicture != null)
                {
                    <img id="profile-image" src="data:image/jpeg;base64,@Convert.ToBase64String(Model.ProfilePicture)"
                         alt="Profile Picture"
                         class="rounded-circle img-thumbnail" style="width: 150px; height: 150px;">
                }
                else
                {
                    <img id="profile-image" src="/icons/defpfp.png" alt="Profile Picture"
                         class="rounded-circle img-thumbnail" style="width: 150px; height: 150px;">
                }
                <b id="profile-username" style="font-weight: normal">@Model.Username</b>
                @if (Model.PlaidEnabled)
                {
                    <i class="bi bi-patch-check"></i>
                }
                @if (Model.HasRatedScore)
                {
                    <div class="performance-badge @GetScoreColorClass(Model.PerformanceScore)"
                         data-bs-toggle="tooltip"
                         data-bs-placement="right"
                         title="Performance Score">
                        <span class="score-value">@Model.PerformanceScore.ToString("N0")</span>
                        @if (isOwner)
                        {
                            <button type="button" class="score-info-btn" data-bs-toggle="modal"
                                    data-bs-target="#scoreBreakdownModal">
                                <i class="bi bi-info-circle"></i>
                            </button>
                        }
                    </div>
                }
                else
                {
                    <div class="performance-badge not-rated"
                         data-bs-toggle="tooltip"
                         data-bs-placement="right"
                         title="Not Yet Rated - Requires Plaid connection, posts, and holdings">
                        <span class="score-value">--</span>
                        <i class="bi bi-dash-circle"></i>
                    </div>
                }
            </h2>
            <div>
                @if (TempData["ProfilePictureError"] != null)
                {
                    <div class="alert alert-danger">
                        @TempData["ProfilePictureError"]
                    </div>
                }
                @if (isOwner)
                {
                    <button class="btn btn-sm btn-secondary" data-bs-toggle="modal"
                            data-bs-target="#updateProfilePictureModal">
                        <i class="bi bi-pencil"></i> Change
                    </button>
                }
            </div>

            @functions {

                string GetScoreColorClass(decimal score)
                {
                    if (score < 40) return "score-poor";
                    if (score >= 40 && score < 60) return "score-fair";
                    if (score >= 60 && score < 80) return "score-good";
                    if (score >= 80 && score < 90) return "score-excellent";
                    return "score-elite";
                }

            }

            @if (!isOwner)
            {
                <!-- Follow/Unfollow button appears only for non-owners -->
                <form asp-action="@(isFollowing ? "Unfollow" : "Follow")" method="post"
                      class="d-inline follow-unfollow-form">
                    <input type="hidden" name="profileId" value="@Model.IdentityId"/>
                    <button type="submit" id="followButton" class="btn btn-primary">
                        @(isFollowing ? "Unfollow" : "Follow")
                    </button>
                </form>

                <!-- Block/Unblock button -->
                <form asp-action="@(Model.IsBlocked ? "Unblock" : "Block")" method="post"
                      class="d-inline block-unblock-form">
                    <input type="hidden" name="profileId" value="@Model.IdentityId"/>
                    <button type="submit" id="blockButton" class="btn btn-danger">
                        @(Model.IsBlocked ? "Unblock" : "Block")
                    </button>
                </form>
                
                <!-- Report button -->
                <button type="button" class="btn btn-warning ms-2" onclick="openReportModal('Profile', @Model.Id)">
                    <i class="bi bi-flag"></i> Report
                </button>
            }
            @if (!isOwner && Model.CanMessage)
            {
                <form asp-controller="Chat" asp-action="StartConversation" method="post" class="d-inline">
                    <input type="hidden" name="userId" value="@Model.Id"/>
                    <button type="submit" class="btn btn-secondary ms-2">
                        <i class="bi bi-chat-text"></i> Message
                    </button>
                </form>
            }
            <p class="text-muted">
                Joined:
                @if (Model.CreatedAt.HasValue)
                {
                    @Model.CreatedAt.Value.ToString("g")
                }
                else
                {
                    <em>N/A</em>
                }
            </p>
        </div>
    </div>

    <!-- Social Stats Row -->
    <div class="row text-center mb-3">
        <div class="col-md-6 mb-3">
            <div class="card">
                <div class="card-body">
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                            data-bs-target="#followersModal">
                        Followers (@Model.FollowersCount)
                    </button>
                </div>
            </div>
        </div>
        <div class="col-md-6 mb-3">
            <div class="card">
                <div class="card-body">
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                            data-bs-target="#followingModal">
                        Following (@Model.FollowingCount)
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bio Card -->
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            About
            @if (isOwner)
            {
                <button class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#editProfileModal">
                    <i class="bi bi-pencil"></i> Edit
                </button>
            }
        </div>
        <div class="card-body">
            <p class="card-text" id="bioText">@Model.Bio</p>
        </div>
        @if (!string.IsNullOrEmpty(Model.UserTag))
        {
            <div class="card-footer">
                <small class="text-muted">Trading Preference: @Model.UserTag</small>
            </div>
        }
    </div>

    <div class="mb-4">
        <nav class="navbar navbar-expand-lg bg-body-tertiary">
            <div class="container-fluid">
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav">
                        <li class="nav-item">
                            <a class="nav-link"
                               asp-controller="Profile"
                               asp-action="UserPosts"
                               asp-route-username="@Model.Username">
                                Posts
                            </a>
                        </li>
                        @if (isOwner)
                        {
                            <li class="nav-item">
                                <a class="nav-link"
                                    asp-controller="Profile" 
                                    asp-action="UserSaves" 
                                    asp-route-username="@Model.Username">
                                    Saved
                                </a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </div>

    <!-- Holdings Section -->
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Investment Holdings</h5>
            <div>
                @if (Model.LastHoldingsUpdate.HasValue)
                {
                    <small class="text-muted me-3">Last updated: @Model.LastHoldingsUpdate.Value.ToString("g")</small>
                }
                @if (isOwner)
                {
                    <a asp-action="PortfolioVisibilitySettings"
                       class="btn btn-secondary btn-sm me-2 @(Model.PlaidEnabled ? "" : "disabled")">
                        <i class="bi bi-eye"></i> Visibility Settings
                    </a>
                    <form asp-action="RefreshHoldings" method="post" class="d-inline">
                        <button type="submit" @(Model.PlaidEnabled ? "" : "disabled") class="btn btn-primary btn-sm">
                            <i class="bi bi-arrow-clockwise"></i> Refresh
                        </button>
                    </form>
                }
            </div>
        </div>
        <div class="card-body">
    @if (!Model.Holdings.Any())
    {
        <p class="text-muted">No holdings found. Connect your brokerage account to see your investments.</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                <tr>
                    <th>Symbol</th>
                    @if (!Model.HideDetailedInformation)
                    {
                        <th>Cost Basis</th>
                        <th class="text-end">Quantity</th>
                    }
                    <th class="text-end">Current Price</th>
                    <th class="text-end">Current Value</th>
                    @if (!Model.HideDetailedInformation)
                    {
                        <th class="text-end">Return</th>
                        <th class="text-end">Return %</th>
                    }
                </tr>
                </thead>
                <tbody id="holdingsTableBody">
                @{
                    var visibleHoldings = Model.Holdings.Where(h => !h.IsHidden).ToList();
                    var initialHoldings = visibleHoldings.Take(2).ToList();
                    var remainingHoldings = visibleHoldings.Skip(2).ToList();
                }

                @foreach (var holding in initialHoldings)
                {
                    <tr class="holding-row">
                        <td>@holding.Symbol</td>
                        @if (!Model.HideDetailedInformation)
                        {
                            <td>@holding.CostBasis</td>
                            <td class="text-end">@holding.Quantity.ToString("N4")</td>
                        }
                        <td class="text-end">$@holding.CurrentPrice.ToString("N2")</td>
                        <td class="text-end">$@holding.CurrentValue.ToString("N2")</td>
                        @if (!Model.HideDetailedInformation)
                        {
                            @if (holding.ReturnAmount == 0 && holding.ReturnPercentage == 0)
                            {
                                <td class="text-end">
                                    N/A
                                </td>
                                <td class="text-end @(holding.ReturnPercentage >= 0 ? "text-success" : "text-danger")">
                                    N/A
                                </td>
                            }
                            else
                            {
                                <td class="text-end @(holding.ReturnAmount >= 0 ? "text-success" : "text-danger")">
                                    $@Math.Abs(holding.ReturnAmount).ToString("N2")
                                    @(holding.ReturnAmount >= 0 ? "+" : "-")
                                </td>
                                <td class="text-end @(holding.ReturnPercentage >= 0 ? "text-success" : "text-danger")">
                                    @Math.Abs(holding.ReturnPercentage).ToString("N2")%
                                    @(holding.ReturnPercentage >= 0 ? "+" : "-")
                                </td>
                            }
                        }
                    </tr>
                }

                @foreach (var holding in remainingHoldings)
                {
                    <tr class="holding-row additional-holdings" style="display: none;">
                        <td>@holding.Symbol</td>
                        @if (!Model.HideDetailedInformation)
                        {
                            <td>@holding.CostBasis</td>
                            <td class="text-end">@holding.Quantity.ToString("N4")</td>
                        }
                        <td class="text-end">$@holding.CurrentPrice.ToString("N2")</td>
                        <td class="text-end">$@holding.CurrentValue.ToString("N2")</td>
                        @if (!Model.HideDetailedInformation)
                        {
                            @if (holding.ReturnAmount == 0 && holding.ReturnPercentage == 0)
                            {
                                <td class="text-end">
                                    N/A
                                </td>
                                <td class="text-end @(holding.ReturnPercentage >= 0 ? "text-success" : "text-danger")">
                                    N/A
                                </td>
                            }
                            else
                            {
                                <td class="text-end @(holding.ReturnAmount >= 0 ? "text-success" : "text-danger")">
                                    $@Math.Abs(holding.ReturnAmount).ToString("N2")
                                    @(holding.ReturnAmount >= 0 ? "+" : "-")
                                </td>
                                <td class="text-end @(holding.ReturnPercentage >= 0 ? "text-success" : "text-danger")">
                                    @Math.Abs(holding.ReturnPercentage).ToString("N2")%
                                    @(holding.ReturnPercentage >= 0 ? "+" : "-")
                                </td>
                            }
                        }
                    </tr>
                }

                @if (Model.HiddenAssetsCount > 0)
                {
                    <tr class="table-secondary">
                        <td>
                            <i class="bi bi-eye-slash"></i> Hidden Assets (@Model.HiddenAssetsCount)
                        </td>
                        @if (!Model.HideDetailedInformation)
                        {
                            <td>-</td>
                            <td class="text-end">-</td>
                        }
                        <td class="text-end">-</td>
                        <td class="text-end">$@Model.HiddenAssetsValue.ToString("N2")</td>
                        @if (!Model.HideDetailedInformation)
                        {
                            <td class="text-end">-</td>
                            <td class="text-end">-</td>
                        }
                    </tr>
                }
                </tbody>
                <tfoot>
                <tr class="fw-bold">
                    <td colspan="@(Model.HideDetailedInformation ? 1 : 3)">Total Portfolio Value</td>
                    <td class="text-end" colspan="@(Model.HideDetailedInformation ? 1 : 2)">
                        $@Model.TotalPortfolioValue.ToString("N2")</td>
                    @if (!Model.HideDetailedInformation)
                    {
                        <td colspan="2"></td>
                    }
                </tr>
                </tfoot>
            </table>
            
            @if (visibleHoldings.Count > 2)
            {
                <div class="mt-2">
                    <button id="toggleHoldings" class="btn btn-primary btn-sm">
                        <span id="toggleText">Show More</span>
                        <i id="toggleIcon" class="bi bi-chevron-down"></i>
                    </button>
                </div>
            }
        </div>
    }
</div>
    </div>

    @if (isOwner)
    {
        <!-- Manage Account and Brokerage Connection Links -->
        <a asp-area="Identity" asp-page="/Account/Manage/Email" class="btn btn-primary">Manage Account</a>
        <a class="btn btn-primary" asp-controller="Brokerage" asp-action="Connect">Connect Brokerage</a>
    }

    <!-- Followers Modal -->
    <div class="modal fade" id="followersModal" tabindex="-1" role="dialog" aria-labelledby="followersModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="followersModalLabel">Followers</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <ul>
                        @for (int i = 0; i < Model.Followers.Count; i++)
                        {
                            var follower = Model.Followers[i];
                            var pfp = (Model.FollowersPfp != null && Model.FollowersPfp.Count > i) ? Model.FollowersPfp[i] : null;
                            <li class="mb-2">
                                @if (pfp != null && pfp.Length > 0)
                                {
                                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(pfp)" alt="Follower Profile Picture"
                                         class="rounded-circle" style="width: 40px; height: 40px;">
                                }
                                else
                                {
                                    <img src="/icons/defpfp.png" alt="Follower Profile Picture"
                                         class="rounded-circle" style="width: 40px; height: 40px;">
                                }
                                <a asp-controller="Profile" asp-action="User" asp-route-id="@follower"
                                   class="btn">@follower</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Following Modal -->
    <div class="modal fade" id="followingModal" tabindex="-1" role="dialog" aria-labelledby="followingModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="followingModalLabel">Following</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <ul>
                        @for (int i = 0; i < Model.Following.Count; i++)
                        {
                            var following = Model.Following[i];
                            var pfp = (Model.FollowingPfp != null && Model.FollowingPfp.Count > i) ? Model.FollowingPfp[i] : null;
                            <li class="mb-2">
                                @if (pfp != null && pfp.Length > 0)
                                {
                                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(pfp)" alt="Following Profile Picture"
                                         class="rounded-circle" style="width: 40px; height: 40px;">
                                }
                                else
                                {
                                    <img src="/icons/defpfp.png" alt="Following Profile Picture"
                                         class="rounded-circle" style="width: 40px; height: 40px;">
                                }
                                <a asp-controller="Profile" asp-action="User" asp-route-id="@following"
                                   class="btn">@following</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for updating profile picture -->
    <div class="modal fade" id="updateProfilePictureModal" tabindex="-1"
         aria-labelledby="updateProfilePictureModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="updateProfilePictureModalLabel">Update Profile Picture</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (TempData["ProfilePictureError"] != null)
                    {
                        <div class="alert alert-danger">
                            @TempData["ProfilePictureError"]
                        </div>
                    }
                    <form id="profilePictureForm" asp-action="UpdateProfilePicture" method="post"
                          enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="profilePictureInput" class="form-label">Choose a new profile picture</label>
                            <input type="file" class="form-control" id="profilePictureInput" name="ProfilePicture"
                                   accept="image/*" required>
                        </div>
                        <div class="crop-container mt-3" style="display: none;">
                            <img id="cropperImage" style="max-width: 100%; display: block;">
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" id="cropAndUploadButton" class="btn btn-primary"
                                    style="display: none;">Crop & Upload
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @if (isOwner)
    {
        <!-- Edit Profile Modal -->
        <div class="modal fade" id="editProfileModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <form asp-action="UpdateProfile" method="post">
                        <div class="modal-header">
                            <h5 class="modal-title">Edit Profile</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            @if (ViewBag.UsernameError != null)
                            {
                                <div class="alert alert-danger">
                                    @ViewBag.UsernameError
                                </div>
                            }

                            <br>
                            <!-- Username Field -->
                            <div class="mb-3">
                                <span asp-validation-for="Username" class="text-danger"></span>
                                <label class="form-label">Username</label>
                                <input type="text" name="Username" class="form-control" value="@Model.Username"
                                       required/>
                            </div>
                            <!-- Bio Field -->
                            <div class="mb-3">
                                <label class="form-label">About</label>
                                <textarea name="Bio" class="form-control" rows="4" maxlength="256">@Model.Bio</textarea>
                                <span asp-validation-for="Bio" class="text-danger"></span>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Trading Preference</label>
                                <select name="UserTag" class="form-select">
                                    <option value="">Select preference...</option>
                                    @if (Model.UserTag == "Stocks")
                                    {
                                        <option value="Stocks" selected>Stocks</option>
                                    }
                                    else
                                    {
                                        <option value="Stocks">Stocks</option>
                                    }
                                    @if (Model.UserTag == "Options")
                                    {
                                        <option value="Options" selected>Options</option>
                                    }
                                    else
                                    {
                                        <option value="Options">Options</option>
                                    }
                                    @if (Model.UserTag == "Crypto")
                                    {
                                        <option value="Crypto" selected>Crypto</option>
                                    }
                                    else
                                    {
                                        <option value="Crypto">Crypto</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    }

    <!-- For the self-view breakdown modal -->
    @if (isOwner && Model.HasRatedScore)
    {
        <div class="modal fade" id="scoreBreakdownModal" tabindex="-1" aria-labelledby="scoreModalLabel"
             aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="scoreModalLabel">Your Performance Score</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Main score display -->
                        <div class="text-center mb-4">
                            <div class="score-circle @GetScoreColorClass(Model.PerformanceScore)">
                                <span class="score-number">@Model.PerformanceScore.ToString("N0")</span>
                            </div>
                            <div class="score-label mt-2">@GetScoreRating(Model.PerformanceScore)</div>
                        </div>

                        <!-- Score component breakdown -->
                        <div class="score-components">
                            @foreach (var item in Model.ScoreBreakdown)
                            {
                                <div class="score-component">
                                    <div class="component-header">
                                        <span class="component-name">@item.Key</span>
                                        <span
                                            class="component-value @GetComponentClass(item.Value)">@item.Value.ToString("N0")</span>
                                    </div>
                                    <div class="progress">
                                        <div class="progress-bar @GetComponentProgressClass(item.Value)"
                                             role="progressbar"
                                             style="width: @Math.Min(item.Value, 100)%;"
                                             aria-valuenow="@item.Value"
                                             aria-valuemin="0"
                                             aria-valuemax="100">
                                        </div>
                                    </div>
                                    <div class="component-desc">@GetComponentDescription(item.Key)</div>
                                </div>
                            }
                        </div>

                        @functions {

                            string GetScoreRating(decimal score)
                            {
                                if (score < 40) return "Needs Improvement";
                                if (score >= 40 && score < 60) return "Fair";
                                if (score >= 60 && score < 80) return "Good";
                                if (score >= 80 && score < 90) return "Excellent";
                                return "Elite";
                            }

                            string GetComponentClass(decimal value)
                            {
                                if (value < 40) return "text-danger";
                                if (value >= 40 && value < 60) return "text-warning";
                                if (value >= 60 && value < 80) return "text-info";
                                return "text-success";
                            }

                            string GetComponentProgressClass(decimal value)
                            {
                                if (value < 40) return "bg-danger";
                                if (value >= 40 && value < 60) return "bg-warning";
                                if (value >= 60 && value < 80) return "bg-info";
                                return "bg-success";
                            }

                            string GetComponentDescription(string key)
                            {
                                switch (key)
                                {
                                    case "Holdings in Green":
                                        return "Percentage of your portfolio positions with positive returns";
                                    case "Community Feedback":
                                        return "How well your posts and analyses are received by other users";
                                    case "Portfolio Performance":
                                        return "Overall growth of your investment portfolio over time";
                                    default:
                                        return "Contributing factor to your overall performance score";
                                }
                            }

                        }

                        <div class="score-footer mt-4">
                            <p class="text-muted">Your score updates as you make trades, create posts, and engage with
                                the community. Higher scores indicate stronger investment performance and community
                                reputation.</p>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Got it</button>
                    </div>
                </div>
            </div>
        </div>
    }
@await Html.PartialAsync("_BackgroundImageModal")
    @await Html.PartialAsync("_ReportModal")    
</div>

@if (ViewBag.UsernameError != null)
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var modalEl = document.getElementById('editProfileModal');
            var modal = new bootstrap.Modal(modalEl);
            modal.show();
        });
    </script>
}

@section Scripts {
    <script src="~/js/profile.js"></script>
    <script src="~/js/backroundImage.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.js"></script>
    <script src="~/js/reportModal.js"></script>
}

<style>
    /* Performance Score Badge Styles */
    .performance-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.25rem 0.75rem;
        border-radius: 1.5rem;
        margin-left: 0.5rem;
        font-weight: bold;
        color: white;
        position: relative;
    }

    .score-value {
        font-size: 1.1rem;
        letter-spacing: 0.05rem;
    }

    .score-info-btn {
        background: none;
        border: none;
        color: white;
        opacity: 0.8;
        margin-left: 0.5rem;
        cursor: pointer;
        transition: opacity 0.2s;
    }

    .score-info-btn:hover {
        opacity: 1;
    }

    .score-poor {
        background-color: #dc3545;
        border: 2px solid #b02a37;
    }

    .score-fair {
        background-color: #fd7e14;
        border: 2px solid #dc6502;
    }

    .score-good {
        background-color: #0dcaf0;
        border: 2px solid #0aa2c0;
    }

    .score-excellent {
        background-color: #198754;
        border: 2px solid #146c43;
    }

    .score-elite {
        background: linear-gradient(45deg, #8a2be2, #4b0082);
        border: 2px solid #6a0dad;
    }

    .not-rated {
        background-color: #6c757d;
        border: 2px solid #5c636a;
    }

    /* Modal Score Circle */
    .score-circle {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        background: white;
        position: relative;
    }

    .score-circle::before {
        content: '';
        position: absolute;
        top: -5px;
        left: -5px;
        right: -5px;
        bottom: -5px;
        border-radius: 50%;
        z-index: -1;
    }

    .score-circle.score-poor {
        box-shadow: 0 0 20px rgba(220, 53, 69, 0.3);
    }

    .score-circle.score-fair {
        box-shadow: 0 0 20px rgba(253, 126, 20, 0.3);
    }

    .score-circle.score-good {
        box-shadow: 0 0 20px rgba(13, 202, 240, 0.3);
    }

    .score-circle.score-excellent {
        box-shadow: 0 0 20px rgba(25, 135, 84, 0.3);
    }

    .score-circle.score-elite {
        box-shadow: 0 0 20px rgba(138, 43, 226, 0.3);
    }

    .score-number {
        font-size: 2.5rem;
        font-weight: bold;
        color: #6a0dad;
    }

    .score-label {
        font-size: 1.2rem;
        font-weight: 500;
    }

    /* Score Components Section */
    .score-components {
        margin-top: 2rem;
    }

    .score-component {
        margin-bottom: 1.5rem;
    }

    .component-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.5rem;
    }

    .component-name {
        font-weight: 500;
    }

    .component-value {
        font-weight: bold;
    }

    .progress {
        height: 0.8rem;
        border-radius: 1rem;
        background-color: #f0f0f0;
        margin-bottom: 0.5rem;
    }

    .component-desc {
        font-size: 0.85rem;
        color: #6c757d;
        margin-top: 0.25rem;
    }

    /* Additional animation for modal opening */
    .modal.fade .modal-dialog {
        transition: transform 0.3s ease-out;
    }

    .modal.show .modal-dialog {
        transform: none;
    }

</style>

<script>
    // View more holdings
    document.addEventListener('DOMContentLoaded', function() {
        const toggleButton = document.getElementById('toggleHoldings');
        if (toggleButton) {
            toggleButton.addEventListener('click', function() {
                const additionalHoldings = document.querySelectorAll('.additional-holdings');
                const toggleText = document.getElementById('toggleText');
                const toggleIcon = document.getElementById('toggleIcon');

                // Check if holdings are currently hidden
                const isHidden = additionalHoldings[0].style.display === 'none';

                // Toggle display
                additionalHoldings.forEach(row => {
                    row.style.display = isHidden ? 'table-row' : 'none';
                });

                // Update button text and icon
                toggleText.textContent = isHidden ? 'Show Less' : 'Show More';
                toggleIcon.className = isHidden ? 'bi bi-chevron-up' : 'bi bi-chevron-down';
            });
        }
    });
    
    // Enhanced Performance Score UI Functionality
    document.addEventListener('DOMContentLoaded', function () {
        // Initialize tooltips
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Add animation to score breakdown modal
        const scoreModal = document.getElementById('scoreBreakdownModal');
        if (scoreModal) {
            scoreModal.addEventListener('show.bs.modal', function () {
                // Animate score number counting up
                const scoreNumber = document.querySelector('.score-number');
                if (scoreNumber) {
                    const finalScore = parseInt(scoreNumber.textContent);
                    animateValue(scoreNumber, 0, finalScore, 1000);
                }

                // Animate progress bars
                setTimeout(() => {
                    document.querySelectorAll('.progress-bar').forEach(bar => {
                        bar.style.transition = 'width 1s ease-out';
                        bar.style.width = bar.getAttribute('aria-valuenow') + '%';
                    });
                }, 300);
            });

            // Reset animations when modal is closed
            scoreModal.addEventListener('hidden.bs.modal', function () {
                document.querySelectorAll('.progress-bar').forEach(bar => {
                    bar.style.transition = 'none';
                    bar.style.width = '0%';
                });
            });
        }

        // Function to animate counting
        function animateValue(element, start, end, duration) {
            let startTimestamp = null;
            const step = (timestamp) => {
                if (!startTimestamp) startTimestamp = timestamp;
                const progress = Math.min((timestamp - startTimestamp) / duration, 1);
                const value = Math.floor(progress * (end - start) + start);
                element.textContent = value;
                if (progress < 1) {
                    window.requestAnimationFrame(step);
                }
            };
            window.requestAnimationFrame(step);
        }

        // Highlight effect for performance badge on hover
        const performanceBadge = document.querySelector('.performance-badge');
        if (performanceBadge) {
            performanceBadge.addEventListener('mouseenter', function () {
                this.style.transform = 'scale(1.05)';
                this.style.transition = 'transform 0.2s ease';
            });

            performanceBadge.addEventListener('mouseleave', function () {
                this.style.transform = 'scale(1)';
            });
        }

        // Make entire performance badge clickable if it's the owner's profile
        const infoBtn = document.querySelector('.score-info-btn');
        if (performanceBadge && infoBtn) {
            performanceBadge.style.cursor = 'pointer';
            performanceBadge.addEventListener('click', function (e) {
                // Don't trigger if the actual button was clicked (to avoid double triggering)
                if (e.target !== infoBtn && !infoBtn.contains(e.target)) {
                    infoBtn.click();
                }
            });
        }
    });

    document.addEventListener('DOMContentLoaded', function () {
        const profilePictureInput = document.getElementById('profilePictureInput');
        const cropperImage = document.getElementById('cropperImage');
        const cropContainer = document.querySelector('.crop-container');
        const cropAndUploadButton = document.getElementById('cropAndUploadButton');
        let cropper;

        profilePictureInput.addEventListener('change', function (event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    cropperImage.src = e.target.result;
                    cropContainer.style.display = 'block';
                    cropAndUploadButton.style.display = 'inline-block';

                    // Initialize Cropper.js
                    if (cropper) {
                        cropper.destroy();
                    }
                    cropper = new Cropper(cropperImage, {
                        aspectRatio: 1,
                        viewMode: 1,
                        autoCropArea: 1,
                    });
                };
                reader.readAsDataURL(file);
            }
        });

        cropAndUploadButton.addEventListener('click', function (e) {
            e.preventDefault();
            if (cropper) {
                cropAndUploadButton.disabled = true;
                cropAndUploadButton.textContent = 'Uploading...';
                const canvas = cropper.getCroppedCanvas({
                    width: 150,
                    height: 150,
                });

                canvas.toBlob(function (blob) {
                    const formData = new FormData();
                    formData.append('ProfilePicture', blob, 'cropped.jpg');

                    // Submit the form via AJAX
                    fetch('/Profile/UpdateProfilePicture', {
                        method: 'POST',
                        body: formData,
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                location.reload();
                            } else {
                                alert('Failed to upload the image.');
                                cropAndUploadButton.disabled = false;
                                cropAndUploadButton.textContent = 'Crop & Upload';
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            cropAndUploadButton.disabled = false;
                            cropAndUploadButton.textContent = 'Crop & Upload';
                        });
                });
            }
        });
    });
</script>
